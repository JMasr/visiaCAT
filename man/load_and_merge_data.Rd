% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01_data_loading.R
\name{load_and_merge_data}
\alias{load_and_merge_data}
\title{Load and Merge Anchor and Item Bank Data}
\usage{
load_and_merge_data(path_anchor, path_item_bank, id_col_name, group_col_name)
}
\arguments{
\item{path_anchor}{A string path to the directory containing anchor item data.
The directory should contain at least one CSV file.}

\item{path_item_bank}{A string path to the directory containing item bank data.
Can contain multiple CSV files.}

\item{id_col_name}{A string representing the column name used as the unique
identifier for joining datasets (e.g., "subject_id").}

\item{group_col_name}{A string for the grouping variable column, expected to
be in the anchor data (e.g., "clinical_group").}
}
\value{
A list containing three elements:
  \item{master_data}{A tibble with the fully merged data.}
  \item{anchor_data_names}{A character vector of column names for the anchor *items*, excluding ID and group columns.}
  \item{item_bank_data_names}{A character vector of column names for the bank *items*, excluding the ID column.}
}
\description{
This function discovers and reads all CSV files from specified anchor and
item bank directories. It then performs a full join to merge them into a
single master dataframe based on a shared ID column. It also validates that
the anchor data file does not appear in the item bank directory and that
required columns are present.
}
\examples{
\dontrun{
# Create dummy directories and files for example
dir.create("temp_anchor")
dir.create("temp_bank")
write.csv(
  data.frame(crd = 1, clinical_group = "A", item_a1 = 1),
  "temp_anchor/anchor.csv",
  row.names = FALSE
)
write.csv(data.frame(crd = 1, item_b1 = 2), "temp_bank/bank.csv", row.names = FALSE)

loaded_data <- load_and_merge_data(
  path_anchor = "temp_anchor",
  path_item_bank = "temp_bank",
  id_col_name = "crd",
  group_col_name = "clinical_group"
)

# Clean up dummy files
unlink("temp_anchor", recursive = TRUE)
unlink("temp_bank", recursive = TRUE)
}
}
